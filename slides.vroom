---- config
title: Transparent Sharing of Complex Data with YAML
indent: 5
height: 21
width: 70

---- center
Transparent Sharing of Complex Data with YAML

by Ingy döt Net

OSCON - 22 July 2009 - San Jose, CA

2:35-3:20pm - Meeting Room B2

----

== Any Questions?

+== (seriously)

+* Who here has used YAML?
+* In what programming languages/environments?
+* How have you used YAML?

---- yaml

== # Ingy döt Net #

---
- Just Another Perl Hacker:
  - Inline
  - Jemplate
  - pQuery 
  - TestML
+- One of the three YAML inventors
- A Progammer: [ Perl, JavaScript, Python ]
- Writing an O'Reilly book about YAML
- Acmeist

----

== Acmeism

* A defunct poetry movement

* A futurist software movement

----

== Acmeism

* The O'Reilly Programming Languages
* All languages do the same thing
* Languages divide people
* Acmeism brings them back together

----

== Acmeism

* YAML is Acmeist
* JSON is Acmeist
* XML is Acmeist
* TestML is Acmeist
* C'Dent is Acmeist

+* OSCON is Acmeist!

----

== YAML - The Book

* Just began writing an O'Reilly book on YAML
* Available in early 2010
* This presentation roughly follows that outline

----

== YAML Ain't Markup Language

Q: What is YAML? (According to the Internet)
A: YAML is a Serialization Language

From Wikipedia:

    * XML  is a ... MARKUP LANGUAGE...
    * JSON is a ... DATA INTERCHANGE FORMAT
    * YAML is a ... DATA SERIALIZATION FORMAT

+   YAML is THE ONLY interlingual *Data Serialization* Language.

    [ Ruby, Perl, Python, PHP, Java, Haskell, JavaScript ]

----

== What is YAML Used For?

* Storing Objects
* Scripting Your Brain
* Viewing Objects
* Interprocess Messaging

----

== Implementations

  C/C++ Libraries:
  - libyaml       # "C" Fast YAML 1.1
  - Syck          # (dated) "C" YAML 1.0
  - yaml-cpp      # C++ YAML 1.1 implementation
  Java:
  - JvYaml        # Java port of RbYaml
  - SnakeYAML     # Java 5 / YAML 1.1
  - YamlBeans     # To/from JavaBeans
  - JYaml         # Original Java Implementation
  Python:
  - PyYaml        # YAML 1.1, pure python and libyaml binding
  - PySyck        # YAML 1.0, syck binding
  Ruby:
  - RbYaml        # YAML 1.1 (PyYaml Port)
  - yaml4r        # YAML 1.0, standard library syck binding
  Perl Modules:
  - YAML          # Pure Perl YAML Module
  - YAML::XS      # Binding to libyaml
  - YAML::Syck    # Binding to libsyck
  - YAML::Tiny    # A small YAML subset module
  - YAML::Perl    # Perl port of PyYaml
  C#/.NET:
  - yaml-net      # YAML 1.1 library
  - yatools.net   # (in-progress) YAML 1.1 implementation
  PHP:
  - syck          # syck bindings (YAML 1.0)
  - spyc          # yaml loader/dumper (YAML 1.?)
  OCaml:
  - ocaml-syck    # YAML 1.0 via syck bindings
  Javascript:
  - JsYaml        # port of PyYaml
  Actionscript:
  - as3yaml       # port of JvYAML (1.1)
  Haskell:
  - YamlReference # Haskell 1.2 reference parser
  - HsYAML        # Audrey Tang's Loader/Dumper Library for Haskell

----

== A Brief History of YAML

+* April 2001 - Clark called Ingy
+* 2002 - Ingy wrote YAML.pm

----

== YAML Language Design

* Support a simple/common data model
  * Hashes/Arrays/Scalars
* Be complex enough to handle any data
  * References
* Human readability
* Use cases
  - Computers producing YAML
    - Serializing objects
  - Humans producing YAML
    - configs
    - programming with data

----

== The YAML Data Model

----

== The YAML Specification

- 1.2 finalized

----

== YAML and XML

----

== YAML and JSON

----

== YAML Syntax Overview

* 5 Scalar Styles
  * Quoting Rarely Needed
  * Implicit Typing
* Block vs Flow
  * JSON is Flow YAML



----

== Advanced YAML Syntax

* Collection Keys
* Flow Sets
* Flow Omaps

----

== YAML in the Wild

* Many Formats are almost YAML
  * Debian
  * Cabal
* CPAN - META.yml
* RoR

----

== The YAML Stack

----

== Modern YAML Implementations

----

== libsyck

----

== PyYaml

----

== libyaml

----

== Dump/Load API

----

== Using YAML in Python

---- python

import yaml

object1 = {
    'name': 'Ingy dot Net',
    'number': 42,
    'needs': [
        'sex',
        'drugs',
        'rock and roll'
    ]
}

yaml1 = yaml.dump(object1)
object2 = yaml.load(yaml1)
yaml2 = yaml.dump(object2)

if yaml1 == yaml2:
    print yaml1
else:
    raise Exception(yaml1 + "!=\n" + yaml2)

----

== Using YAML in Perl

* YAML.pm - 2001
* YAML::Syck - Binding to libsyck
* YAML::XS - Binding to libyaml
* YAML::Tiny - Not really YAML
* YAML::Perl - Port of PyYaml
  * Sponsored by The Perl Foundation

----

== Using YAML in Ruby

* rbyaml - Ships with Ruby since 2004

----

== Using YAML in PHP

----

== Using YAML in JavaScript

----

== Intro to TestML

----

== YAML Tags and Types

----

== Implicit Typing

----

== YAML Schema

There is no official schema, or schema tools.
Rx.
YOK.
Transmitters and Receivers need to agree on meaning.
Default schema.

----

== Stream Processing

Parser
Emitter

----

== Issues with YAML

* Spec is Complex
* Implementations differ somewhat
* Version skew

----

== 

----
== The End



+http://ingydotnet.github.com/yaml-pgh2009-talk/
